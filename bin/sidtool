#!/usr/bin/env ruby
require 'sidtool'
require 'optparse'

DEFAULT_FRAMES_TO_PROCESS = 15000
EXPORTERS = {
  'ruby' => Sidtool::RubyFileWriter,
  'midi' => Sidtool::MidiFileWriter
}

params = {}
OptionParser.new do |parser|
  parser.banner = 'Usage: sidtool [options] <intputfile.sid>'

  parser.on('-i', '--info', 'Show file information')
  parser.on('--format FORMAT', 'Output format, "ruby" (default) or "midi"')
  parser.on('-o', '--out FILENAME', 'Output file (Ruby array)')
  parser.on('-s', '--song NUMBER', Integer, 'Song number to process (defaults to the start song in the file)')
  parser.on('-f', '--frames NUMBER', Integer, "Number of frames to process (default #{DEFAULT_FRAMES_TO_PROCESS})")
  parser.on_tail('-h', '--help', 'Show this message') do
    puts parser
    exit
  end
  parser.on_tail('--version', 'Show version') do
    puts Sidtool::VERSION
    exit
  end
end.parse!(into: params)

raise 'Missing input file' if ARGV.empty?
raise 'Too many arguments' if ARGV.length > 1
input_file = ARGV.pop
sid_file = Sidtool::FileReader.read(input_file)

output_file = params[:out]
show_info = !!params[:info]
raise 'Either provide -i or -o, or I have nothing to do!' unless output_file || show_info

format = params[:format] || EXPORTERS.keys.first
exporter_class = EXPORTERS[format]
raise "Invalid format: #{format}. Valid formats: #{EXPORTERS.keys.join(', ')}" unless exporter_class

song = params[:song] || sid_file.start_song
raise 'Song must be at least 1' if song < 1
raise "File only has #{sid_file.songs} songs" if song > sid_file.songs

frames = params[:frames] || DEFAULT_FRAMES_TO_PROCESS

if show_info
  puts "Read #{sid_file.format} version #{sid_file.version} file."
  puts "Name: #{sid_file.name}"
  puts "Author: #{sid_file.author}"
  puts "Released: #{sid_file.released}"
  puts "Songs: #{sid_file.songs} (start song: #{sid_file.start_song})"
end

def jsr(cpu, address, accumulator_value=0)
  cpu.set_register_A(accumulator_value)
  cpu.set_register_Y(0)
  #cpu.set_register_P(0) What is register P?
  cpu.set_register_S(255)
  cpu.set_register_PC(address)
  cpu.stack_S_push(0)
  cpu.stack_S_push(0)
  while (cpu.register_PC > 1)
  	cpu.clock
   end
end

if output_file
  bus = Mos6502::TH8::Bus.new
  cpu = ::MOS6502.new(bus)

  # Map the SID to the address space
  sid_mapping = bus.attach('SID', 0xD400, 0xD7FF)
  sid = Sidtool::Sid.new
  sid_mapping.set_read  { |offset| 0 }
  sid_mapping.set_write { |offset, byte| sid.poke(offset, byte) }

  # Map some RAM to the rest of the address space
  ram = bus.attach('RAM', 0x0000, 0xFFFF)
  ram.alloc(0x10000)
  ram.set_read  { |offset| @mem[offset] }
  ram.set_write { |offset, byte| @mem[offset] = (byte & 0xff) }

  load_address = sid_file.data[0] + (sid_file.data[1] << 8)

  sid_file.data[2..-1].each_with_index do |byte, index|
    ram.write(load_address + index, byte)
  end

  play_address = sid_file.play_address
  if play_address == 0
    jsr(cpu, sid_file.init_address)
    play_address = (ram.read(0x0315) << 8) + ram.read(0x0314)
    STDERR.puts "New play address #{play_address}"
  end

  jsr(cpu, sid_file.init_address, song - 1)

  frames.times do
    jsr(cpu, play_address)
    sid.finish_frame
    Sidtool::STATE.current_frame += 1
    if Sidtool::STATE.current_frame % 1000 == 0
      puts "Frame #{Sidtool::STATE.current_frame}"
    end
  end

  sid.stop!

  STDERR.puts("Processed #{frames} frames")

  exporter_class.new(sid.synths_for_voices).write_to(output_file)
end
